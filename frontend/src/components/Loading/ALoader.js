// AnimatedSVG.js
import React, { useEffect } from 'react';
import gsap from 'gsap';
import './ALoader.css';

const AnimatedSVG = () => {

    useEffect(() => {
        // Your gsap animations
        let select = s => document.querySelector(s),
            toArray = s => gsap.utils.toArray(s),
            mainSVG = select('#mainSVG'),
            allEll = toArray('.ell'),
            colorArr = ['#48ff00', '#00ffd5','#002bff','#001ba4']

        let colorInterp = gsap.utils.interpolate(colorArr);

        gsap.set(mainSVG, {
            visibility: 'visible'
        })

        function animate (el, count) {
            let tl = gsap.timeline({
                defaults: {
                    ease: 'sine.inOut'
                },
                repeat: -1
            });
            gsap.set(el, {
                opacity:1- count/(allEll.length),
                stroke: colorInterp(count/(allEll.length))
            })

            tl.to(el, {
                attr: {
                    ry: `-=${count*2.3}`,
                    rx: `+=${count*1.4}`
                },
                ease: 'sine.in'
            })
            .to(el, {
                attr: {
                    ry: `+=${count*2.3}`,
                    rx: `-=${count*1.4}`
                },
                ease: 'sine'
            })
            .to(el, {
                duration: 1,
                rotation: -180,
                transformOrigin: '50% 50%'
            }, 0).timeScale(0.5)
        }
        allEll.forEach((c, i) => {
            gsap.delayedCall(i/(allEll.length-1), animate, [c, i+1])
        })
        gsap.to('#aiGrad', {
            duration: 4,
            delay: 0.75,
            attr: {
                x1: '-=300',
                x2: '-=300'
            },
            scale: 1.2,
            transformOrigin: '50% 50%',
            repeat: -1,
            ease: 'none'
        })
        gsap.to('#ai', {
            duration: 1,
            scale: 1.1,
            transformOrigin: '50% 50%',
            repeat: -1,
            yoyo: true,
            ease: 'sine.inOut'
        }) 
    }, []);

    return (
        <div className="animated-svg-container">
            <svg id="mainSVG" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 800 600">
            <defs>
    
    <linearGradient id="aiGrad" x1="513.98" y1="290" x2="479.72" y2="320" gradientUnits="userSpaceOnUse">
        <stop offset="0" stop-color="#002bff" stop-opacity="1" />
        <stop offset=".15" stop-color="#48ff00" />
        <stop offset=".4" stop-color="#00ffd5" />
        <stop offset=".6" stop-color="#002bff" />
        <stop offset=".78" stop-color="#001ba4" />
        <stop offset="1" stop-color="#00ffd5" stop-opacity="1" />
    </linearGradient>

</defs>

<ellipse class="ell" cx="400" cy="300" rx="80" ry="80" />
<ellipse class="ell" cx="400" cy="300" rx="80" ry="80" />
<ellipse class="ell" cx="400" cy="300" rx="80" ry="80" />
<ellipse class="ell" cx="400" cy="300" rx="80" ry="80" />
<ellipse class="ell" cx="400" cy="300" rx="80" ry="80" />
<ellipse class="ell" cx="400" cy="300" rx="80" ry="80" />
<ellipse class="ell" cx="400" cy="300" rx="80" ry="80" />
<ellipse class="ell" cx="400" cy="300" rx="80" ry="80" />
<ellipse class="ell" cx="400" cy="300" rx="80" ry="80" />
<ellipse class="ell" cx="400" cy="300" rx="80" ry="80" />
<ellipse class="ell" cx="400" cy="300" rx="80" ry="80" />
<ellipse class="ell" cx="400" cy="300" rx="80" ry="80" />
<ellipse class="ell" cx="400" cy="300" rx="80" ry="80" />
<ellipse class="ell" cx="400" cy="300" rx="80" ry="80" />
<ellipse class="ell" cx="400" cy="300" rx="80" ry="80" />
<ellipse class="ell" cx="400" cy="300" rx="80" ry="80" />
<ellipse class="ell" cx="400" cy="300" rx="80" ry="80" />
<ellipse class="ell" cx="400" cy="300" rx="80" ry="80" />
<ellipse class="ell" cx="400" cy="300" rx="80" ry="80" />
<ellipse class="ell" cx="400" cy="300" rx="80" ry="80" />
<ellipse class="ell" cx="400" cy="300" rx="80" ry="80" />
<ellipse class="ell" cx="400" cy="300" rx="80" ry="80" />
<ellipse class="ell" cx="400" cy="300" rx="80" ry="80" />
<ellipse class="ell" cx="400" cy="300" rx="80" ry="80" />
<ellipse class="ell" cx="400" cy="300" rx="80" ry="80" />
<ellipse class="ell" cx="400" cy="300" rx="80" ry="80" />
<ellipse class="ell" cx="400" cy="300" rx="80" ry="80" />
<ellipse class="ell" cx="400" cy="300" rx="80" ry="80" />
<ellipse class="ell" cx="400" cy="300" rx="80" ry="80" />
<ellipse class="ell" cx="400" cy="300" rx="80" ry="80" />
<g id="svgg" transform="translate(340,250) scale(0.3)">
<path id="ai" opacity="0.85" d="M171.081 6.518 C 89.821 25.669,55.542 134.496,111.858 194.531 L 119.919 203.125 102.822 203.125 C 86.261 203.125,85.197 203.659,68.936 220.125 L 52.147 237.124 27.596 214.956 C -3.786 186.619,-8.260 189.975,21.268 219.701 L 43.760 242.345 21.880 264.057 C 2.372 283.416,-4.453 293.750,2.270 293.750 C 3.519 293.750,14.446 283.911,26.552 271.885 L 48.564 250.020 82.824 284.386 L 117.083 318.752 150.729 285.211 L 184.375 251.669 218.020 285.210 L 251.665 318.750 302.979 318.750 L 354.294 318.750 345.897 327.515 C 341.279 332.335,337.500 337.960,337.500 340.015 C 337.500 347.620,345.966 343.325,360.938 328.125 L 376.328 312.500 360.938 296.875 C 345.966 281.675,337.500 277.380,337.500 284.985 C 337.500 287.040,341.279 292.665,345.897 297.485 L 354.294 306.250 302.979 306.250 L 251.665 306.250 218.021 272.711 L 184.378 239.172 151.565 271.872 L 118.753 304.573 87.526 273.463 L 56.298 242.353 71.000 227.427 L 85.703 212.500 167.045 212.500 L 248.388 212.500 319.506 141.432 L 390.625 70.363 390.625 86.744 C 390.625 99.222,391.742 103.125,395.313 103.125 C 399.091 103.125,400.000 98.249,400.000 77.988 L 400.000 52.851 377.377 53.769 C 349.357 54.907,341.418 64.509,367.077 66.227 L 381.418 67.188 346.569 101.563 C 322.480 125.324,312.256 133.680,313.454 128.625 C 329.516 60.859,245.661 -11.059,171.081 6.518 M227.344 34.158 C 239.875 50.448,239.892 51.680,227.659 55.944 C 205.151 63.790,203.125 62.106,203.125 35.556 L 203.125 11.738 210.156 16.346 C 214.023 18.881,221.758 26.896,227.344 34.158 M193.750 39.273 C 193.750 60.283,193.140 62.754,188.281 61.421 C 185.273 60.596,177.539 59.031,171.094 57.944 C 154.703 55.179,159.137 34.276,179.077 20.310 C 191.770 11.419,193.750 13.978,193.750 39.273 M157.925 30.413 C 153.566 36.828,150.000 43.895,150.000 46.118 C 150.000 49.246,147.878 49.063,140.625 45.312 C 128.204 38.889,128.762 36.292,144.531 27.109 C 163.696 15.949,167.171 16.806,157.925 30.413 M248.944 26.694 C 264.569 35.851,265.304 38.069,254.959 44.847 C 247.529 49.716,247.301 49.562,239.304 34.269 C 229.967 16.412,230.578 15.931,248.944 26.694 M142.117 68.750 C 141.130 74.766,139.488 87.831,138.466 97.784 L 136.609 115.881 114.398 114.972 L 92.188 114.063 93.098 104.688 C 94.718 88.001,102.949 67.263,112.595 55.560 L 122.016 44.131 132.963 50.972 C 142.905 57.185,143.745 58.816,142.117 68.750 M292.496 73.438 C 296.462 82.031,300.656 95.039,301.815 102.344 L 303.924 115.625 282.247 115.625 L 260.570 115.625 256.523 87.025 C 253.137 63.104,253.167 58.026,256.706 55.989 C 259.033 54.649,263.750 51.391,267.188 48.749 C 274.900 42.820,281.206 48.972,292.496 73.438 M193.750 94.376 L 193.750 115.625 170.313 115.625 L 146.875 115.625 146.875 102.946 C 146.875 95.973,148.373 84.320,150.203 77.050 L 153.532 63.832 173.641 68.479 L 193.750 73.127 193.750 94.376 M246.670 87.500 C 248.476 98.672,249.963 108.867,249.976 110.156 C 249.989 111.445,239.453 112.500,226.563 112.500 L 203.125 112.500 203.125 92.247 C 203.125 72.708,203.428 71.925,211.719 70.048 C 216.445 68.977,224.531 67.036,229.688 65.735 C 242.005 62.626,242.819 63.669,246.670 87.500 M138.654 144.531 C 139.786 155.273,141.451 167.578,142.355 171.875 C 143.707 178.302,141.947 180.998,132.437 187.075 L 120.876 194.462 114.904 187.075 C 106.432 176.596,94.761 150.513,92.372 136.719 L 90.342 125.000 113.469 125.000 L 136.596 125.000 138.654 144.531 M193.750 145.253 C 193.750 164.839,193.467 165.564,185.156 167.259 C 180.430 168.223,171.712 170.314,165.784 171.905 C 159.856 173.495,154.459 174.251,153.792 173.584 C 151.302 171.094,147.022 148.030,146.950 136.719 L 146.875 125.000 170.313 125.000 L 193.750 125.000 193.750 145.253 M249.976 127.344 C 249.921 132.873,243.308 170.062,242.006 172.169 C 241.219 173.442,236.017 173.329,230.444 171.920 C 224.872 170.510,216.445 168.490,211.719 167.431 C 203.426 165.573,203.125 164.797,203.125 145.253 L 203.125 125.000 226.563 125.000 C 239.453 125.000,249.989 126.055,249.976 127.344 M302.061 136.598 C 299.652 151.442,266.295 186.500,257.713 183.207 C 253.377 181.543,252.732 178.862,254.407 169.476 C 255.553 163.061,257.336 150.430,258.370 141.406 L 260.249 125.000 282.096 125.000 L 303.943 125.000 302.061 136.598 M193.750 189.063 L 193.750 203.125 179.768 203.125 C 150.306 203.125,151.510 182.015,181.250 177.133 C 185.547 176.428,190.117 175.660,191.406 175.426 C 192.695 175.192,193.750 181.328,193.750 189.063 M235.177 183.927 C 242.198 190.948,230.470 203.125,216.686 203.125 L 203.125 203.125 203.125 189.466 L 203.125 175.807 217.840 178.556 C 225.933 180.068,233.735 182.485,235.177 183.927 M150.000 191.932 C 150.000 192.651,150.854 195.463,151.897 198.182 C 153.410 202.126,151.516 203.125,142.522 203.125 C 129.995 203.125,128.587 201.148,136.719 194.975 C 141.938 191.013,150.000 189.166,150.000 191.932 M253.125 193.125 C 253.125 196.411,246.338 203.125,243.015 203.125 C 241.580 203.125,241.910 200.312,243.750 196.875 C 247.053 190.703,253.125 188.275,253.125 193.125" stroke="url(#aiGrad)" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" />
</g>
            </svg>
        </div>
    );
}

export default AnimatedSVG;
